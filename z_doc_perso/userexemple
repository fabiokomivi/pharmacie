1. Entité User avec Hibernate (JPA)

Voici l'entité User qui représente un utilisateur avec les annotations Hibernate/JPA :

// src/main/java/com/pharmacie/models/User.java
package com.pharmacie.models;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-incrémentation de l'ID
    private int id;

    @Column(nullable = false, unique = true) // Le nom d'utilisateur doit être unique
    private String username;

    @Column(nullable = false) // Le mot de passe est obligatoire
    private String password;

    @Column(nullable = false)
    private String email;

    private String firstName;
    private String lastName;

    @Column(name = "date_of_birth")
    private LocalDate dateOfBirth;

    @Enumerated(EnumType.STRING) // Enum pour gérer les rôles
    @Column(nullable = false)
    private Role role;

    // Constructeurs
    public User() {}

    public User(int id, String username, String password, String email, String firstName, String lastName, LocalDate dateOfBirth, Role role) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.dateOfBirth = dateOfBirth;
        this.role = role;
    }

    // Getters et Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public LocalDate getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(LocalDate dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    // Méthode toString pour afficher les informations de l'utilisateur
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", email='" + email + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", dateOfBirth=" + dateOfBirth +
                ", role=" + role +
                '}';
    }

    // Enum pour gérer les rôles d'utilisateur
    public enum Role {
        ADMIN, USER
    }
}

Explications détaillées sur l'entité User :

    @Entity : Cette annotation indique à Hibernate que la classe User est une entité JPA, c'est-à-dire qu'elle sera mappée à une table dans la base de données.
    @Table(name = "users") : Cette annotation permet de spécifier le nom de la table associée à l'entité dans la base de données.
    @Id et @GeneratedValue(strategy = GenerationType.IDENTITY) : L'ID est la clé primaire de l'entité, et sa valeur est générée automatiquement par la base de données (stratégie d'auto-incrémentation).
    @Column(nullable = false, unique = true) : Ces annotations définissent des contraintes sur les colonnes (par exemple, username ne peut pas être nul et doit être unique).
    @Enumerated(EnumType.STRING) : Cette annotation permet de sauvegarder l'énumération Role sous forme de chaîne (par exemple, ADMIN, USER) dans la base de données.

